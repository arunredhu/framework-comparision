{"version":3,"sources":["shared/services/http-client/http-client.js","movies/shared/services/movies/movies.js","movies/movies.js","app-routes.js","app.js","serviceWorker.js","index.js"],"names":["httpClient","axios","create","interceptors","request","use","config","response","error","Promise","reject","fetchMovies","get","Movies","getMovies","then","data","console","log","this","react_default","a","createElement","React","Component","AppRoutes","react_router","path","component","from","to","App","className","app_routes","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAgBMA,SAAaC,EAAMC,OAVV,IA8BfF,EAAWG,aAAaC,QAAQC,IAXR,SAAAC,GAEtB,OAAOA,IAUTN,EAAWG,aAAaC,QAAQC,IAPN,SAAAC,GAExB,OAAOA,IAQTN,EAAWG,aAAaI,SAASF,IAC/B,SAAAE,GACE,OAAOA,GAET,SAAAC,GAEE,OAAOC,QAAQC,OAAOF,KC5C1B,IAAMG,EAAc,WAElB,OAAOX,EAAWY,IADN,+DCiBCC,6MAfbC,UAAY,WACVH,IAAcI,KAAK,SAAAC,GACjBC,QAAQC,IAAI,CAAEF,+FAKhBG,KAAKL,6CAIL,OAAOM,EAAAC,EAAAC,cAAA,4BAZUC,IAAMC,WCQZC,EAPG,kBAChBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWf,IACjCO,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAUG,KAAK,IAAIC,GAAG,oBCIXC,MARf,WACE,OACEX,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAACW,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWG,KAE7BW,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.49ae2c0e.chunk.js","sourcesContent":["import axios from 'axios';\n\n/**\n * Axios basic configuration\n * Some general configuration can be added like timeout, headers, params etc. More details can be found on https://github.com/axios/axios\n * */\nconst config = {\n  // baseURL: apiBaseUrl\n};\n\n/**\n * Creating the instance of Axios\n * It is because, in large scale application we may need to consume APIs from more than single server,\n * So, may need to create multiple http client with different config\n * Only this client will be used rather than axios in the application\n **/\nconst httpClient = axios.create(config);\n\n/**\n * Auth interceptors\n * @description Configuration related to AUTH token can be done in interceptors.\n * Currenlty it is just doing nothing but idea to to show the capability of axios and its interceptors\n * In future, interceptors can be created into separate files and consumed into multiple http clients\n * @param {*} config\n */\nconst authInterceptor = config => {\n  /** add auth token */\n  return config;\n};\n\nconst loggerInterceptor = config => {\n  /** Add logging here */\n  return config;\n};\n\n/** Adding the request interceptors */\nhttpClient.interceptors.request.use(authInterceptor);\nhttpClient.interceptors.request.use(loggerInterceptor);\n\n/** Adding the response interceptors */\nhttpClient.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    /** Do something with response error */\n    return Promise.reject(error);\n  }\n);\n\nexport { httpClient };\n","import { httpClient } from '../../../../shared/services/http-client/http-client';\n\nconst fetchMovies = () => {\n  const url = 'https://www.omdbapi.com/?apikey=a567cf6c&s=love&type=movie';\n  return httpClient.get(url);\n};\n\nexport { fetchMovies };\n","import React from 'react';\n\nimport { fetchMovies } from './shared/services/movies/movies';\n\nclass Movies extends React.Component {\n  getMovies = () => {\n    fetchMovies().then(data => {\n      console.log({ data });\n    });\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    return <div>Movies</div>;\n  }\n}\n\nexport default Movies;\n","import React from 'react';\nimport { Switch, Redirect, Route } from 'react-router-dom';\n\nimport Movies from './movies/movies';\n\nconst AppRoutes = () => (\n  <Switch>\n    <Route path=\"/movies\" component={Movies} />\n    <Redirect from=\"/\" to=\"/movies\" />\n  </Switch>\n);\n\nexport default AppRoutes;\n","import React from 'react';\nimport AppRoutes from './app-routes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRoutes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <Route path=\"/\" component={App} />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}